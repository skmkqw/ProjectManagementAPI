@page "/Project/{projectId:guid}"
@using ProjectPulse.Core.Models
@using ProjectPulse.DataAccess.DTOs.Projects
@using ProjectPulse.DataAccess.DTOs.Tasks
@using ProjectPulse.Web.Services.Projects
@using ProjectPulse.Web.Services.Tasks
@using ProjectPulse.Web.Components.Layout
@using ProjectPulse.Web.Services.Users

@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IUsersService UsersService
@inject ITasksService TasksService
@inject IProjectsService ProjectsService

@rendermode InteractiveServer

@if (DisplayAddTaskModal)
{
    <AddTask DisplayModal="DisplayAddTaskModal" OnClose="OnAddTaskModalClose" CreateTaskCallback="CreateTask"></AddTask>
}

@if (DisplayEditProjectModal)
{
    <EditProject DisplayModal="DisplayEditProjectModal" OnClose="OnEditProjectModalClose" EditProjectCallback="EditProject"></EditProject>
}

<section class="projects-wrapper">
    <div class="projects-top">
        <div class="projects-top-head">
            <h1>@_project.Name</h1>
            <div class="projects-buttons">
                <div class="projects-button-item" @onclick="ShowEditProjectModal">
                    <img src="img/edit.svg" alt="">
                </div>
                <div class="projects-button-item">
                    <img src="img/link.svg" alt="">
                </div>
                <div class="projects-button-item" @onclick="DeleteProject">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 6H5H21" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
            </div>
        </div>
        <div class="projects-top-footer">
            <div class="project-description">
                @_project.Description
            </div>
        </div>
    </div>
    <div class="projects-bottom">
        <div class="project-tasks">
            <div class="project-tasks-item to-do">
                <div class="task-column-top">
                    <div class="task-column-left">
                        <span class="task-column-circle"></span>
                        <p class="task-column-title">To Do</p>
                        <div class="task-column-counter">
                            <p>@TasksToDo.Count</p>
                        </div>
                    </div>
                    <div class="task-column-right">
                        <div class="task-column-icon projects-button-item">
                            <img src="img/plus.svg" alt="" @onclick="ShowAddTaskModal">
                        </div>
                    </div>
                </div>
                <div class="task-column-border"></div>
                <div class="task-column-content">
                    @foreach (var task in TasksToDo)
                    {
                        <div class="task-card">
                            <div class="task-card-head">
                                <p class="task-title">@task.Title</p>
                                <div class="task-buttons">
                                    <div class="projects-button-item" @onclick="() => AssignSelf(task.Id.ToString())">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4z" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <path d="M4 18c0-2.21 1.79-4 4-4h8c2.21 0 4 1.79 4 4v2H4v-2z" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    </div>
                                    <div class="projects-button-item" @onclick="() => DeleteTask(task.Id)">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M3 6H5H21" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <path d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    </div>
                                    <div class="projects-button-item" @onclick="() => ChangeStatus(TaskStatuses.InProgress, task.Id.ToString())">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M9 18L15 12L9 6" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            <div class="task-description">
                                @task.Description
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="project-tasks-item in-progress">
                <div class="task-column-top">
                    <div class="task-column-left">
                        <span class="task-column-circle"></span>
                        <p class="task-column-title">In Progress</p>
                        <div class="task-column-counter">
                            <p>@TasksInProgress.Count</p>
                        </div>
                    </div>
                    <div class="task-column-right">
                    </div>
                </div>
                <div class="task-column-border"></div>
                <div class="task-column-content">
                    @foreach (var task in TasksInProgress)
                    {
                        <div class="task-card">
                            <div class="task-card-head">
                                <p class="task-title">@task.Title</p>
                                <div class="task-buttons">
                                    <div class="projects-button-item" @onclick="() => DeleteTask(task.Id)">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M3 6H5H21" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <path d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    </div>
                                    <div class="projects-button-item" @onclick="() => ChangeStatus(TaskStatuses.Done, task.Id.ToString())">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M9 18L15 12L9 6" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            <div class="task-description">
                                @task.Description
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="project-tasks-item done">
                <div class="task-column-top">
                    <div class="task-column-left">
                        <span class="task-column-circle"></span>
                        <p class="task-column-title">Done</p>
                        <div class="task-column-counter">
                            <p>@TasksDone.Count</p>
                        </div>
                    </div>
                    <div class="task-column-right">
                    </div>
                </div>
                <div class="task-column-border"></div>
                <div class="task-column-content">
                    @foreach (var task in TasksDone)
                    {
                        <div class="task-card">
                            <div class="task-card-head">
                                <p class="task-title">@task.Title</p>
                                <div class="task-buttons">
                                    <div class="projects-button-item" @onclick="() => DeleteTask(task.Id)">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M3 6H5H21" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <path d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="#5030E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            <div class="task-description">
                                @task.Description
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    
    [Parameter]
    public Guid ProjectId { get; set; }

    private ProjectDto _project { get; set; } = new ();

    private List<TaskDto> TasksToDo { get; set; } = new ();
    
    private List<TaskDto> TasksInProgress { get; set; } = new ();
    
    private List<TaskDto> TasksDone { get; set; } = new ();

    protected override async Task OnInitializedAsync()
    {
        ProjectDto? project = await ProjectsService.GetProject(ProjectId);
        if (project == null)
        {
            Navigation.NavigateTo("/Error");
        }

        _project = project!;

        var tasks = await GetTasks();
        SortTasks(tasks);
        
    }

    private async Task<List<TaskDto>> GetTasks()
    {
        var tasks = await TasksService.GetTasks(ProjectId.ToString());
        if (tasks == null)
        {
            Navigation.NavigateTo("/Error");
        }

        return tasks!;
    }

    private void SortTasks(List<TaskDto> tasks)
    {
        foreach (var task in tasks)
        {
            if (task.Status == TaskStatuses.ToDo)
            {
                TasksToDo.Add(task);
            }
            else if (task.Status == TaskStatuses.InProgress)
            {
                TasksInProgress.Add(task);
            }
            else
            {
                TasksDone.Add(task);   
            }
        }
    }
    
    private async Task CreateTask(CreateTaskDto newTask)
    {
        await TasksService.CreateTask(newTask, ProjectId.ToString());
        
        var tasks = await GetTasks();
        TasksToDo = new List<TaskDto>();
        TasksInProgress = new List<TaskDto>();
        TasksDone = new List<TaskDto>();
        SortTasks(tasks);
        StateHasChanged();
    }

    private async Task AssignSelf(string taskId)
    {
        string userId = UsersService.GetUserId();
        await TasksService.AssignUser(taskId, userId);
        await JS.InvokeVoidAsync("AlertUserAssignmentSuccess");
    }

    private async Task ChangeStatus(TaskStatuses status, string taskId)
    {
        try
        {
            await TasksService.ChangeStatus(taskId, status);
            
            var tasks = await GetTasks();
            TasksToDo = new List<TaskDto>();
            TasksInProgress = new List<TaskDto>();
            TasksDone = new List<TaskDto>();
            SortTasks(tasks);
            StateHasChanged();
        }
        catch (ApplicationException e)
        {
            await JS.InvokeVoidAsync("AlertChangeStatusFailed");
        }
    }

    private async Task DeleteTask(Guid taskId)
    {
        await TasksService.DeleteTask(taskId.ToString());
        
        var tasks = await GetTasks();
        TasksToDo = new List<TaskDto>();
        TasksInProgress = new List<TaskDto>();
        TasksDone = new List<TaskDto>();
        SortTasks(tasks);
        StateHasChanged();
    }

    private async Task EditProject(UpdateProjectDto updateProject)
    {
        await ProjectsService.UpdateProject(updateProject, ProjectId.ToString());
        TasksToDo = new List<TaskDto>();
        TasksInProgress = new List<TaskDto>();
        TasksDone = new List<TaskDto>();
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task DeleteProject()
    {
        await ProjectsService.DeleteProject(ProjectId.ToString());
        Navigation.NavigateTo("/");
    }
    
    public bool DisplayAddTaskModal { get; set; }

    private void ShowAddTaskModal()
    {
        DisplayAddTaskModal = true;
    }

    private void OnAddTaskModalClose(bool isOpen)
    {
        DisplayAddTaskModal = isOpen;
    }
    
    public bool DisplayEditProjectModal { get; set; }

    private void ShowEditProjectModal()
    {
        DisplayEditProjectModal = true;
    }

    private void OnEditProjectModalClose(bool isOpen)
    {
        DisplayEditProjectModal = isOpen;
    }

}