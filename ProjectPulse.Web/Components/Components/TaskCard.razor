@using ProjectPulse.Core.Models
<div class="task-card">
    <div class="task-card-head">
        <div class="task-priority">
            Low
        </div>
        <div class="task-buttons">
            <div class="dropdown">
                <button class="btn dropdown-toggle-button" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    ...
                </button>
                <div class="dropdown-menu">
                    @if (!IsDone)
                    {
                    <div class="dropdown-menu-item dropdown-item" @onclick="() => AssignUser(Id)">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4z" stroke="#787486" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M4 18c0-2.21 1.79-4 4-4h8c2.21 0 4 1.79 4 4v2H4v-2z" stroke="#787486" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <p>Assign user</p>
                    </div>
                    <div class="dropdown-menu-item dropdown-item" @onclick="() => ChangeStatus(TaskStatuses.InProgress, Id)">
                        <img src="img/editgray.svg" alt="">
                        <p>Edit</p>
                    </div>
                    }
                    <div class="dropdown-menu-item dropdown-item" id="delete" @onclick="() => DeleteTask(Id)">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 6H5H21" stroke="#787486" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="#787486" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <p>Delete</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="task-card-main">
        <p class="task-title">@Title</p>
        <div class="task-description">
            @Description
        </div>
    </div>
    <div class="task-card-footer">
        <div class="task-responsible">
            <img src="img/reposible.png" alt="">
        </div>
        <div class="task-additional">
            <div class="task-additional-item">
                <img src="img/comment.svg" alt="">
                <p class="task-additional-item-text">12 Comments</p>
            </div>
            <div class="task-additional-item">
                <img src="img/files.svg" alt="">
                <p class="task-additional-item-text">3 Files</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] 
    public string Id { get; set; } = String.Empty;
    
    [Parameter] 
    public string Title { get; set; } = String.Empty;
    
    [Parameter] 
    public string Description { get; set; } = String.Empty;
    
    [Parameter]
    public TaskStatuses Status { get; set; }
    
    [Parameter]
    public bool IsDone { get; set; }
    
    [Parameter]
    public EventCallback<string> DeleteTaskCallback { get; set; }

    private void DeleteTask(string id)
    {
        DeleteTaskCallback.InvokeAsync(id);
    }
    
    [Parameter]
    public EventCallback<(TaskStatuses status, string id)> ChangeStatusCallback { get; set; }

    private void ChangeStatus(TaskStatuses status, string id)
    {
        ChangeStatusCallback.InvokeAsync((status, id));
        
        StateHasChanged();
    }
    
    [Parameter]
    public EventCallback<string> AssignUserCallback { get; set; }

    private void AssignUser(string id)
    {
        AssignUserCallback.InvokeAsync(id);
    }
}